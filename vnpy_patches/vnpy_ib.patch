Index: vnpy_ib/ib_gateway.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vnpy_ib/ib_gateway.py b/vnpy_ib/ib_gateway.py
--- a/vnpy_ib/ib_gateway.py	(revision 7ada3f092ad6c24bc577086e18ccea731501354a)
+++ b/vnpy_ib/ib_gateway.py	(date 1695796843640)
@@ -12,14 +12,17 @@
 
 from copy import copy
 from datetime import datetime, timedelta
+from decimal import Decimal
 from threading import Thread, Condition
-from typing import Optional, Dict, Any, List
+from typing import Optional, Dict, Any, List, Tuple
 import shelve
+
+from sortedcontainers import SortedDict
 from tzlocal import get_localzone_name
 
 from vnpy.event import EventEngine
 from ibapi.client import EClient
-from ibapi.common import OrderId, TickAttrib, TickerId
+from ibapi.common import OrderId, TickAttrib, TickerId, ListOfPriceIncrements
 from ibapi.contract import Contract, ContractDetails
 from ibapi.execution import Execution
 from ibapi.order import Order
@@ -56,7 +59,7 @@
 from vnpy.trader.event import EVENT_TIMER
 from vnpy.event import Event
 
-# 委托状态映射
+# delegated state map
 STATUS_IB2VT: Dict[str, Status] = {
     "ApiPending": Status.SUBMITTING,
     "PendingSubmit": Status.SUBMITTING,
@@ -68,13 +71,13 @@
     "Inactive": Status.REJECTED,
 }
 
-# 多空方向映射
+# long-short direction mapping
 DIRECTION_VT2IB: Dict[Direction, str] = {Direction.LONG: "BUY", Direction.SHORT: "SELL"}
 DIRECTION_IB2VT: Dict[str, Direction] = {v: k for k, v in DIRECTION_VT2IB.items()}
 DIRECTION_IB2VT["BOT"] = Direction.LONG
 DIRECTION_IB2VT["SLD"] = Direction.SHORT
 
-# 委托类型映射
+# delegate type mapping
 ORDERTYPE_VT2IB: Dict[OrderType, str] = {
     OrderType.LIMIT: "LMT",
     OrderType.MARKET: "MKT",
@@ -82,7 +85,7 @@
 }
 ORDERTYPE_IB2VT: Dict[str, OrderType] = {v: k for k, v in ORDERTYPE_VT2IB.items()}
 
-# 交易所映射
+# exchange mapping
 EXCHANGE_VT2IB: Dict[Exchange, str] = {
     Exchange.SMART: "SMART",
     Exchange.NYMEX: "NYMEX",
@@ -106,11 +109,21 @@
     Exchange.IEX: "IEX",
     Exchange.IBKRATS: "IBKRATS",
     Exchange.OTC: "PINK",
-    Exchange.SGX: "SGX"
+    Exchange.SGX: "SGX",
+    Exchange.IBIS: "IBIS",
+    Exchange.SFB: "SFB",
+    Exchange.FXCONV: "FXCONV",
+    Exchange.GETTEX: "GETTEX",
+    Exchange.OMXNO: "OMXNO",
+    Exchange.OSE: "OSE",
+    Exchange.LSE: "LSE",
+    Exchange.EUREX: "EUREX",
+    Exchange.TSEJ: "TSEJ",
+    Exchange.SBF: "SBF"
 }
 EXCHANGE_IB2VT: Dict[str, Exchange] = {v: k for k, v in EXCHANGE_VT2IB.items()}
 
-# 产品类型映射
+# Product Type Mapping
 PRODUCT_IB2VT: Dict[str, Product] = {
     "STK": Product.EQUITY,
     "CASH": Product.FOREX,
@@ -119,13 +132,14 @@
     "OPT": Product.OPTION,
     "FOP": Product.OPTION,
     "CONTFUT": Product.FUTURES,
-    "IND": Product.INDEX
+    "IND": Product.INDEX,
+    "CFD": Product.CFD
 }
 
-# 期权类型映射
+# Option Type Mapping
 OPTION_VT2IB: Dict[str, OptionType] = {OptionType.CALL: "CALL", OptionType.PUT: "PUT"}
 
-# 货币类型映射
+# Currency Type Mapping
 CURRENCY_VT2IB: Dict[Currency, str] = {
     Currency.USD: "USD",
     Currency.CAD: "CAD",
@@ -133,7 +147,7 @@
     Currency.HKD: "HKD",
 }
 
-# 切片数据字段映射
+# Slice data field mapping
 TICKFIELD_IB2VT: Dict[int, str] = {
     0: "bid_volume_1",
     1: "bid_price_1",
@@ -148,7 +162,7 @@
     14: "open_price",
 }
 
-# 账户类型映射
+# Account Type Mapping
 ACCOUNTFIELD_IB2VT: Dict[str, str] = {
     "NetLiquidationByCurrency": "balance",
     "NetLiquidation": "balance",
@@ -157,47 +171,47 @@
     "MaintMarginReq": "margin",
 }
 
-# 数据频率映射
+# Data Frequency Mapping
 INTERVAL_VT2IB: Dict[Interval, str] = {
     Interval.MINUTE: "1 min",
     Interval.HOUR: "1 hour",
     Interval.DAILY: "1 day",
 }
 
-# 其他常量
+# other constants
 LOCAL_TZ = ZoneInfo(get_localzone_name())
 JOIN_SYMBOL: str = "-"
 
 
 class IbGateway(BaseGateway):
     """
-    VeighNa用于对接IB的交易接口。
+    VeighNa is used to connect to the trading interface of IB。
     """
 
     default_name: str = "IB"
 
     default_setting: Dict[str, Any] = {
-        "TWS地址": "127.0.0.1",
-        "TWS端口": 7497,
-        "客户号": 1,
-        "交易账户": ""
+        "TWS address": "127.0.0.1",
+        "TWS port": 7497,
+        "client id": 1,
+        "trading account": ""
     }
 
     exchanges: List[str] = list(EXCHANGE_VT2IB.keys())
 
     def __init__(self, event_engine: EventEngine, gateway_name: str) -> None:
-        """构造函数"""
+        """Constructor"""
         super().__init__(event_engine, gateway_name)
 
         self.api: "IbApi" = IbApi(self)
         self.count: int = 0
 
     def connect(self, setting: dict) -> None:
-        """连接交易接口"""
-        host: str = setting["TWS地址"]
-        port: int = setting["TWS端口"]
-        clientid: int = setting["客户号"]
-        account: str = setting["交易账户"]
+        """Connect transaction interface"""
+        host: str = setting["TWS address"]
+        port: int = setting["TWS port"]
+        clientid: int = setting["client id"]
+        account: str = setting["trading account"]
 
         self.api.connect(host, port, clientid, account)
 
@@ -208,7 +222,7 @@
         self.api.close()
 
     def subscribe(self, req: SubscribeRequest) -> None:
-        """订阅行情"""
+        """Subscribe Quotes"""
         self.api.subscribe(req)
 
     def send_order(self, req: OrderRequest) -> str:
@@ -220,7 +234,7 @@
         self.api.cancel_order(req)
 
     def query_account(self) -> None:
-        """查询资金"""
+        """Query funds"""
         pass
 
     def query_position(self) -> None:
@@ -232,7 +246,7 @@
         return self.api.query_history(req)
 
     def process_timer_event(self, event: Event) -> None:
-        """定时事件处理"""
+        """Timed Event Handling"""
         self.count += 1
         if self.count < 10:
             return
@@ -242,11 +256,13 @@
 
 
 class IbApi(EWrapper):
-    """IB的API接口"""
+    """API interface of IB"""
 
     data_filename: str = "ib_contract_data.db"
     data_filepath: str = str(get_file_path(data_filename))
 
+    price_increments: Dict[int, SortedDict[Decimal, Decimal]] = {}
+
     def __init__(self, gateway: IbGateway) -> None:
         """构造函数"""
         super().__init__()
@@ -272,6 +288,7 @@
 
         self.history_req: HistoryRequest = None
         self.history_condition: Condition = Condition()
+        self.market_rule_condition: Condition = Condition()
         self.history_buf: List[BarData] = []
 
         self.client: EClient = EClient(self)
@@ -279,7 +296,7 @@
     def connectAck(self) -> None:
         """连接成功回报"""
         self.status = True
-        self.gateway.write_log("IB TWS连接成功")
+        self.gateway.write_log("IB TWS connection is successful")
 
         self.load_contract_data()
 
@@ -288,7 +305,7 @@
     def connectionClosed(self) -> None:
         """连接断开回报"""
         self.status = False
-        self.gateway.write_log("IB TWS连接断开")
+        self.gateway.write_log("IB TWS connection disconnected")
 
     def nextValidId(self, orderId: int) -> None:
         """下一个有效订单号回报"""
@@ -304,23 +321,23 @@
         dt: datetime = datetime.fromtimestamp(time)
         time_string: str = dt.strftime("%Y-%m-%d %H:%M:%S.%f")
 
-        msg: str = f"服务器时间: {time_string}"
+        msg: str = f"server time: {time_string}"
         self.gateway.write_log(msg)
 
-    def error(self, reqId: TickerId, errorCode: int, errorString: str) -> None:
-        """具体错误请求回报"""
+    def error(self, reqId: TickerId, errorCode: int, errorString: str, advancedOrderRejectJson: str = "") -> None:
+        """specific bug report"""
         super().error(reqId, errorCode, errorString)
     
-        # 2000-2999信息通知不属于报错信息
+        # 2000-2999 Information notification does not belong to error information
         if reqId == self.history_reqid and errorCode not in range(2000, 3000):
             self.history_condition.acquire()
             self.history_condition.notify()
             self.history_condition.release()
 
-        msg: str = f"信息通知，代码：{errorCode}，内容: {errorString}"
+        msg: str = f"information notification, code：{errorCode}，content: {errorString}, req: {reqId}"
         self.gateway.write_log(msg)
 
-        # 行情服务器已连接
+        # The market server is connected
         if errorCode == 2104 and not self.data_ready:
             self.data_ready = True
 
@@ -334,7 +351,7 @@
     def tickPrice(
         self, reqId: TickerId, tickType: TickType, price: float, attrib: TickAttrib
     ) -> None:
-        """tick价格更新回报"""
+        """tick price update return"""
         super().tickPrice(reqId, tickType, price, attrib)
 
         if tickType not in TICKFIELD_IB2VT:
@@ -344,12 +361,12 @@
         name: str = TICKFIELD_IB2VT[tickType]
         setattr(tick, name, price)
 
-        # 更新tick数据name字段
+        # Update the tick data name field
         contract: ContractData = self.contracts.get(tick.vt_symbol, None)
         if contract:
             tick.name = contract.name
 
-        # 本地计算Forex of IDEALPRO和Spot Commodity的tick时间和最新价格
+        # Local calculation of tick time and latest price of Forex of IDEALPRO and Spot Commodity
         exchange: Exchange = self.tick_exchange[reqId]
         if exchange is Exchange.IDEALPRO or "CMDTY" in tick.symbol:
             if not tick.bid_price_1 or not tick.ask_price_1:
@@ -357,11 +374,15 @@
             tick.last_price = (tick.bid_price_1 + tick.ask_price_1) / 2
             tick.datetime = datetime.now(LOCAL_TZ)
         self.gateway.on_tick(copy(tick))
+        # if tick.vt_symbol == "USD-PLN-CFD.SMART":
+        #     tick = copy(tick)
+        #     tick.vt_symbol = "USD-PLN-CFD.SMART"
+        #     self.gateway.on_tick(copy(tick))
 
     def tickSize(
         self, reqId: TickerId, tickType: TickType, size: int
     ) -> None:
-        """tick数量更新回报"""
+        """tick number update return"""
         super().tickSize(reqId, tickType, size)
 
         if tickType not in TICKFIELD_IB2VT:
@@ -402,7 +423,7 @@
         whyHeld: str,
         mktCapPrice: float,
     ) -> None:
-        """订单状态更新回报"""
+        """Order Status Update Report"""
         super().orderStatus(
             orderId,
             status,
@@ -438,7 +459,7 @@
         ib_order: Order,
         orderState: OrderState,
     ) -> None:
-        """新订单回报"""
+        """new order report"""
         super().openOrder(
             orderId, ib_contract, ib_order, orderState
         )
@@ -514,7 +535,7 @@
             exchange: Exchange = Exchange.SMART   # Use smart routing for default
 
         if not exchange:
-            msg: str = f"存在不支持的交易所持仓{generate_symbol(contract)} {contract.exchange} {contract.primaryExchange}"
+            msg: str = f"There are unsupported exchange positions {generate_symbol(contract)} {contract.exchange} {contract.primaryExchange}"
             self.gateway.write_log(msg)
             return
 
@@ -542,7 +563,7 @@
             self.gateway.on_account(copy(account))
 
     def contractDetails(self, reqId: int, contractDetails: ContractDetails) -> None:
-        """合约数据更新回报"""
+        """Contract data update return"""
         super().contractDetails(reqId, contractDetails)
 
         # 从IB合约生成vnpy代码
@@ -552,6 +573,14 @@
 
         symbol: str = generate_symbol(ib_contract)
 
+        exchanges = contractDetails.validExchanges.split(",")
+        exchange_idx = exchanges.index(ib_contract.exchange)
+        market_rule_id = None
+        try:
+            market_rule_id = int(contractDetails.marketRuleIds.split(",")[exchange_idx])
+        except Exception as e:
+            print(f"Exception getting Market Rule Id: {e}")
+
         # 生成合约
         contract: ContractData = ContractData(
             symbol=symbol,
@@ -564,6 +593,7 @@
             history_data=True,
             stop_supported=True,
             gateway_name=self.gateway_name,
+            marketRuleId=market_rule_id
         )
 
         if contract.vt_symbol not in self.contracts:
@@ -575,11 +605,16 @@
     def execDetails(
         self, reqId: int, contract: Contract, execution: Execution
     ) -> None:
-        """交易数据更新回报"""
+        """Transaction data update return"""
         super().execDetails(reqId, contract, execution)
 
-        dt: datetime = datetime.strptime(execution.time, "%Y%m%d  %H:%M:%S")
-        dt: datetime = dt.replace(tzinfo=LOCAL_TZ)
+        # handle '20230424 17:15:00 US/Eastern'
+        if len(execution.time) > 17:
+            dt, tz = execution.time.rsplit(" ", maxsplit=1)
+            dt: datetime = datetime.strptime(dt, '%Y%m%d %H:%M:%S').replace(tzinfo=ZoneInfo(tz))
+        else:
+            dt: datetime = datetime.strptime(execution.time, "%Y%m%d  %H:%M:%S")
+            dt: datetime = dt.replace(tzinfo=LOCAL_TZ)
 
         trade: TradeData = TradeData(
             symbol=generate_symbol(contract),
@@ -604,13 +639,17 @@
                 if account_code:
                     self.account = account_code
 
-        self.gateway.write_log(f"当前使用的交易账号为{self.account}")
+        self.gateway.write_log(f"The current trading account number is {self.account}")
         self.client.reqAccountUpdates(True, self.account)
 
     def historicalData(self, reqId: int, ib_bar: IbBarData) -> None:
-        """历史数据更新回报"""
-        # 日级别数据和周级别日期数据的数据形式为%Y%m%d
-        if len(ib_bar.date) > 8:
+        """Historical Data Update Report"""
+        # handle '20230424 17:15:00 US/Eastern'
+        if len(ib_bar.date) > 17:
+            dt, tz = ib_bar.date.rsplit(" ", maxsplit=1)
+            dt: datetime = datetime.strptime(dt, '%Y%m%d %H:%M:%S').replace(tzinfo=ZoneInfo(tz))
+        # The data format of day-level data and week-level date data is %Y%m%d
+        elif len(ib_bar.date) > 8:
             dt: datetime = datetime.strptime(ib_bar.date, "%Y%m%d %H:%M:%S")
         else:
             dt: datetime = datetime.strptime(ib_bar.date, "%Y%m%d")
@@ -675,32 +714,34 @@
         self.client.disconnect()
 
     def subscribe(self, req: SubscribeRequest) -> None:
-        """订阅tick数据更新"""
+        """Subscribe to tick data updates"""
         if not self.status:
             return
 
         if req.exchange not in EXCHANGE_VT2IB:
-            self.gateway.write_log(f"不支持的交易所{req.exchange}")
+            self.gateway.write_log(f"unsupported exchange {req.exchange}")
             return
 
-        # 过滤重复订阅
+        # Filter duplicate subscriptions
         if req.vt_symbol in self.subscribed:
             return
         self.subscribed[req.vt_symbol] = req
 
-        # 解析IB合约详情
+        # Analyze IB contract details
         ib_contract: Contract = generate_ib_contract(req.symbol, req.exchange)
         if not ib_contract:
-            self.gateway.write_log("代码解析失败，请检查格式是否正确")
+            self.gateway.write_log("Code parsing failed, please check if the format is correct")
             return
 
-        # 通过TWS查询合约信息
+        # Query contract information through TWS
         self.reqid += 1
         self.client.reqContractDetails(self.reqid, ib_contract)
+        self.gateway.write_log(f"reqContractDetails: {req.vt_symbol} -> {self.reqid}")
 
-        #  订阅tick数据并创建tick对象缓冲区
+        #  Subscribe to tick data and create a tick object buffer
         self.reqid += 1
         self.client.reqMktData(self.reqid, ib_contract, "", False, False, [])
+        self.gateway.write_log(f"reqMktData: {req.vt_symbol} -> {self.reqid}")
 
         tick: TickData = TickData(
             symbol=req.symbol,
@@ -717,11 +758,11 @@
             return ""
 
         if req.exchange not in EXCHANGE_VT2IB:
-            self.gateway.write_log(f"不支持的交易所：{req.exchange}")
+            self.gateway.write_log(f"unsupported exchange：{req.exchange}")
             return ""
 
         if req.type not in ORDERTYPE_VT2IB:
-            self.gateway.write_log(f"不支持的价格类型：{req.type}")
+            self.gateway.write_log(f"Unsupported price type：{req.type}")
             return ""
 
         self.orderid += 1
@@ -738,7 +779,7 @@
         ib_order.totalQuantity = req.volume
         ib_order.account = self.account
 
-        # 修复API版本升级导致的委托报错问题
+        # Fix the problem of commission error reporting caused by API version upgrade
         ib_order.eTradeOnly = False
         ib_order.firmQuoteOnly = False
 
@@ -747,6 +788,8 @@
         elif req.type == OrderType.STOP:
             ib_order.auxPrice = req.price
 
+        ib_order.outsideRth = True
+
         self.client.placeOrder(self.orderid, ib_contract, ib_order)
         self.client.reqIds(1)
 
@@ -759,13 +802,13 @@
         if not self.status:
             return
 
-        self.client.cancelOrder(int(req.orderid))
+        self.client.cancelOrder(int(req.orderid), "")
 
     def query_history(self, req: HistoryRequest) -> List[BarData]:
-        """查询历史数据"""
+        """Query historical data"""
         contract: ContractData = self.contracts[req.vt_symbol]
         if not contract:
-            self.write_log(f"找不到合约：{req.vt_symbol}，请先订阅")
+            self.write_log(f"contract not found：{req.vt_symbol}，Please subscribe first")
             return []
 
         self.history_req = req
@@ -782,7 +825,7 @@
             end_str: str = ""
 
         delta: timedelta = end - req.start
-        days: int = min(delta.days, 180)     # IB 只提供6个月数据
+        days: int = min(delta.days, 365)     # IB Podaje tylko dane z 6 miesięcy -> ale dla 30s i mniejszych barow
         duration: str = f"{days} D"
         bar_size: str = INTERVAL_VT2IB[req.interval]
 
@@ -816,7 +859,7 @@
         return history
 
     def load_contract_data(self) -> None:
-        """加载本地合约数据"""
+        """Load local contract data"""
         f = shelve.open(self.data_filepath)
         self.contracts = f.get("contracts", {})
         f.close()
@@ -824,17 +867,37 @@
         for contract in self.contracts.values():
             self.gateway.on_contract(contract)
 
-        self.gateway.write_log("本地缓存合约信息加载成功")
+        self.gateway.write_log("Local cache contract information loaded successfully")
 
     def save_contract_data(self) -> None:
-        """保存合约数据至本地"""
+        """Save contract data locally"""
         f = shelve.open(self.data_filepath)
         f["contracts"] = self.contracts
         f.close()
 
+    def query_price_steps_sync(self, vt_symbol) -> Tuple[int, SortedDict[Decimal, Decimal]]:
+        market_rule_id = self.contracts[vt_symbol].marketRuleId
+
+        self.client.reqMarketRule(market_rule_id)
+
+        self.market_rule_condition.acquire()    # 等待异步数据返回
+        self.market_rule_condition.wait()
+        self.market_rule_condition.release()
+
+        return (market_rule_id, self.price_increments[market_rule_id])
+
+    def marketRule(self, marketRuleId: int, priceIncrements: ListOfPriceIncrements):
+        self.market_rule_condition.acquire()
+
+        self.price_increments[marketRuleId] = SortedDict(
+            {Decimal(str(price_increment.lowEdge)): Decimal(str(price_increment.increment)) for price_increment in priceIncrements}
+        )
+
+        self.market_rule_condition.notify()
+        self.market_rule_condition.release()
 
 def generate_ib_contract(symbol: str, exchange: Exchange) -> Optional[Contract]:
-    """生产IB合约"""
+    """Produce IB contract"""
     try:
         fields: list = symbol.split(JOIN_SYMBOL)
 
@@ -862,7 +925,7 @@
 
 
 def generate_symbol(ib_contract: Contract) -> str:
-    """生成vnpy代码"""
+    """generate vnpy code"""
     fields: list = [ib_contract.symbol]
 
     if ib_contract.secType in ["FUT", "OPT", "FOP"]:
